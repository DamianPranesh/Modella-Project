// import { Tags, ChevronRight, X, Plus } from "lucide-react";
// import { useState } from "react";
// import { fetchData } from "../api/api"; // Import API function

// export const BusinessTagsSection = ({
//   tagsData,
//   primaryLight,
//   primaryDark,
//   primaryColor,
//   getIconForField,
//   hasDropdownOptions,
//   isDropdownOpen,
//   dropdownField,
//   toggleDropdown,
//   renderDropdown,
//   handleInputChange,
//   removeTag,
// }: {
//   tagsData: { work_Field: string[]; location: string };
//   primaryLight: string;
//   primaryDark: string;
//   primaryColor: string;
//   getIconForField: (field: string) => string;
//   hasDropdownOptions: (field: string) => boolean;
//   isDropdownOpen: boolean;
//   dropdownField: string;
//   toggleDropdown: (field: string) => void;
//   renderDropdown: (field: string, isPreference?: boolean) => JSX.Element;
//   handleInputChange: (field: string, value: string) => void;
//   removeTag: (index: number) => void;
// }) => {
//   // Local state to track user selections
//   const [formData, setFormData] = useState({ ...tagsData });

//   // Handle selecting work fields or location from dropdown
//   const handleSelectOption = (field: string, option: string) => {
//     setFormData((prev) => {
//       const updatedData = { ...prev };

//       if (field === "work_Field") {
//         // Prevent duplicate selections
//         if (!updatedData.work_Field.includes(option)) {
//           updatedData.work_Field = [...updatedData.work_Field, option];
//         }
//       } else if (field === "location") {
//         updatedData.location = option; // Single value selection
//       }

//       return updatedData;
//     });

//     handleInputChange(field, option); // Update parent state
//     toggleDropdown(field); // Close dropdown
//   };

//   // Remove a work field tag
//   const handleRemoveTag = (index: number) => {
//     const updatedWorkFields = formData.work_Field.filter((_, i) => i !== index);

//     setFormData((prev) => ({
//       ...prev,
//       work_Field: updatedWorkFields,
//     }));

//     //handleInputChange("work_Field", updatedWorkFields); // Update parent state
//   };

//   // Send extracted values to the backend
//   const handleSaveChanges = async () => {
//     try {
//       const tagData = {
//         user_Id: localStorage.getItem("user_id") || "", // Get user ID dynamically
//         work_Field: formData.work_Field, // Extracted Work Fields
//         location: formData.location, // Extracted Location
//       };

//       const response = await fetchData("tags/upsert/brands/", {
//         method: "PUT",
//         body: JSON.stringify(tagData),
//       });

//       console.log("Successfully updated brand tags:", response);
//     } catch (error) {
//       console.error("Failed to update brand tags:", error);
//     }
//   };

//   return (
//     <div className="p-6 bg-gradient-to-br from-white to-orange-50">
//       <h2
//         className="text-2xl font-bold mb-6 flex items-center"
//         style={{ color: primaryDark }}
//       >
//         <Tags className="mr-2" size={24} /> Business Categories
//       </h2>

//       <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//         {Object.entries(formData).map(([key, value]) => (
//           <div
//             key={key}
//             className="mb-4 bg-white p-4 rounded-xl shadow-md hover:shadow-lg transition-all transform hover:-translate-y-1 relative"
//           >
//             <label
//               className="block text-sm font-semibold mb-2 capitalize flex items-center"
//               style={{ color: primaryColor }}
//             >
//               <span className="mr-2 text-xl">{getIconForField(key)}</span>
//               {key.replace(/_/g, " ")}
//             </label>

//             {hasDropdownOptions(key) ? (
//               <div className="relative">
//                 {key === "work_Field" ? (
//                   <>
//                     <div className="flex flex-wrap gap-2 mb-2">
//                       {Array.isArray(value) &&
//                         value.map((item, i) => (
//                           <div
//                             key={i}
//                             className="flex items-center bg-orange-50 px-3 py-1 rounded-full"
//                           >
//                             <span>{item}</span>
//                             <button
//                               className="ml-2 text-red-500 hover:text-red-700"
//                               onClick={() => handleRemoveTag(i)}
//                             >
//                               <X size={14} />
//                             </button>
//                           </div>
//                         ))}
//                     </div>
//                     <button
//                       className="flex items-center text-sm px-3 py-2 rounded-full hover:opacity-80 transition-colors"
//                       style={{
//                         backgroundColor: primaryLight,
//                         color: primaryDark,
//                       }}
//                       onClick={() => toggleDropdown(key)}
//                     >
//                       <Plus size={16} className="mr-1" /> Add industry
//                     </button>
//                     {isDropdownOpen &&
//                       dropdownField === key &&
//                       renderDropdown(key)}
//                   </>
//                 ) : (
//                   <>
//                     <div
//                       className="flex items-center justify-between p-3 border rounded-lg cursor-pointer"
//                       style={{
//                         borderColor: primaryLight,
//                         backgroundColor: "#FFF9F5",
//                       }}
//                       onClick={() => toggleDropdown(key)}
//                     >
//                       <span>{String(value) || "Select location"}</span>
//                       <ChevronRight size={16} className="transform rotate-90" />
//                     </div>
//                     {isDropdownOpen &&
//                       dropdownField === key &&
//                       renderDropdown(key)}
//                   </>
//                 )}
//               </div>
//             ) : (
//               <input
//                 type="text"
//                 className="border rounded-lg p-3 w-full focus:ring-2 focus:outline-none transition-all"
//                 style={{
//                   borderColor: primaryLight,
//                   backgroundColor: "#FFF9F5",
//                   outlineColor: primaryColor,
//                 }}
//                 value={value as string}
//                 onChange={(e) => {
//                   setFormData({ ...formData, [key]: e.target.value });
//                   handleInputChange(key, e.target.value); // Update parent state
//                 }}
//               />
//             )}
//           </div>
//         ))}
//       </div>

//       {/* Save and Reset Buttons */}
//       <div className="flex justify-end mt-6">
//         <button
//           className="bg-gray-200 text-gray-800 px-6 py-3 rounded-lg mr-3 font-medium hover:bg-gray-300 transition-colors"
//           onClick={() => setFormData({ ...tagsData })}
//         >
//           Reset
//         </button>
//         <button
//           className="text-white px-6 py-3 rounded-lg font-medium shadow-md hover:shadow-lg transition-all transform hover:-translate-y-1"
//           style={{
//             background: `linear-gradient(to right, ${primaryColor}, ${primaryDark})`,
//           }}
//           onClick={handleSaveChanges}
//         >
//           Save Changes
//           <ChevronRight size={18} className="ml-1" />
//         </button>
//       </div>
//     </div>
//   );
// };

// import { Tags, ChevronRight, X, Plus } from "lucide-react";
// import { useState } from "react";
// import { fetchData } from "../api/api";

// // Business Tags Section Component
// export const BusinessTagsSection = ({
//   tagsData,
//   primaryLight,
//   primaryDark,
//   primaryColor,
//   getIconForField,
//   hasDropdownOptions,
//   isDropdownOpen,
//   dropdownField,
//   toggleDropdown,
//   renderDropdown,
//   handleInputChange,
//   removeTag,
// }: {
//   tagsData: { work_Field: string[]; location: string };
//   primaryLight: string;
//   primaryDark: string;
//   primaryColor: string;
//   getIconForField: (field: string) => string;
//   hasDropdownOptions: (field: string) => boolean;
//   isDropdownOpen: boolean;
//   dropdownField: string;
//   toggleDropdown: (field: string) => void;
//   renderDropdown: (field: string, isPreference?: boolean) => JSX.Element;
//   handleInputChange: (
//     field: string,
//     value: string,
//     isPreference?: boolean
//   ) => void;
//   removeTag: (index: number) => void;
// }) => {
//   // Local state for managing tag selections
//   const [formData, setFormData] = useState({ ...tagsData });
//   const user_Id = "brand_67d25faed1ef21f7e2541638";

//   // Log the current work_Field and location selections to the console
//   const logSelections = () => {
//     console.log("Work Fields Selected:", formData.work_Field);
//     console.log("Location Selected:", formData.location);
//   };

//   // Save Changes: Updates tagsData (can be sent to backend)
//   const handleSaveChanges = async () => {
//     try {
//       const tagData = {
//         user_Id: user_Id, // Get user ID dynamically
//         work_Field: formData.work_Field, // Extracted Work Fields
//         location: formData.location, // Extracted Location
//       };

//       const response = await fetchData("ModellaTag/tags/upsert/brands/", {
//         method: "PUT",
//         body: JSON.stringify(tagData),
//       });

//       console.log("Successfully updated brand tags:", response);
//     } catch (error) {
//       console.error("Failed to update brand tags:", error);
//     }
//   };

//   // Reset: Restores original tagsData
//   const handleReset = () => {
//     setFormData({ ...tagsData });
//   };

//   // Handle selection from dropdown
//   const handleDropdownSelection = (key: string, value: string) => {
//     setFormData((prevState) => {
//       if (key === "work_Field") {
//         // Add value to work_Field array if it's not already there
//         if (!prevState.work_Field.includes(value)) {
//           return { ...prevState, work_Field: [...prevState.work_Field, value] };
//         }
//       } else if (key === "location") {
//         // Directly update the location value
//         return { ...prevState, location: value };
//       }
//       return prevState;
//     });
//     logSelections();
//   };

//   return (
//     <div className="p-6 bg-gradient-to-br from-white to-orange-50">
//       <h2
//         className="text-2xl font-bold mb-6 flex items-center"
//         style={{ color: primaryDark }}
//       >
//         <Tags className="mr-2" size={24} /> Business Categories
//       </h2>
//       <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//         {Object.entries(tagsData).map(([key, value]) => (
//           <div
//             key={key}
//             className="mb-4 bg-white p-4 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 relative"
//             style={{
//               zIndex: isDropdownOpen && dropdownField === key ? 1000 : 1,
//             }}
//           >
//             <label
//               className="block text-sm font-semibold mb-2 capitalize flex items-center"
//               style={{ color: primaryColor }}
//             >
//               <span className="mr-2 text-xl">{getIconForField(key)}</span>
//               {key.replace(/_/g, " ")}
//             </label>

//             {hasDropdownOptions(key) ? (
//               <div className="relative">
//                 {key === "work_Field" ? (
//                   <>
//                     <div className="flex flex-wrap gap-2 mb-2">
//                       {Array.isArray(value) &&
//                         value.map((item, i) => (
//                           <div
//                             key={i}
//                             className="flex items-center bg-orange-50 px-3 py-1 rounded-full"
//                             style={{ borderColor: primaryLight }}
//                           >
//                             <span>{item}</span>
//                             <button
//                               className="ml-2 text-red-500 hover:text-red-700"
//                               onClick={() => {
//                                 removeTag(i);
//                                 logSelections(); // Log after removing tag
//                               }}
//                             >
//                               <X size={14} />
//                             </button>
//                           </div>
//                         ))}
//                     </div>
//                     <button
//                       className="flex items-center text-sm px-3 py-2 rounded-full hover:opacity-80 transition-colors self-start"
//                       style={{
//                         backgroundColor: primaryLight,
//                         color: primaryDark,
//                       }}
//                       onClick={() => {
//                         toggleDropdown(key);
//                         logSelections(); // Log when adding tag
//                       }}
//                     >
//                       <Plus size={16} className="mr-1" /> Add industry
//                     </button>
//                     {isDropdownOpen &&
//                       dropdownField === key &&
//                       renderDropdown(key)}
//                   </>
//                 ) : (
//                   <>
//                     <div
//                       className="flex items-center justify-between p-3 border rounded-lg cursor-pointer"
//                       style={{
//                         borderColor: primaryLight,
//                         backgroundColor: "#FFF9F5",
//                       }}
//                       onClick={() => {
//                         toggleDropdown(key);
//                         logSelections(); // Log when adding tag
//                       }}
//                     >
//                       <span>{String(value) || "Select location"}</span>
//                       <ChevronRight size={16} className="transform rotate-90" />
//                     </div>
//                     {isDropdownOpen &&
//                       dropdownField === key &&
//                       renderDropdown(key)}
//                   </>
//                 )}
//               </div>
//             ) : (
//               <input
//                 type="text"
//                 className="border rounded-lg p-3 w-full focus:ring-2 focus:outline-none transition-all"
//                 style={{
//                   borderColor: primaryLight,
//                   backgroundColor: "#FFF9F5",
//                   outlineColor: primaryColor,
//                 }}
//                 value={value as string}
//                 onChange={(e) => {
//                   setFormData({ ...formData, [key]: e.target.value });
//                   handleInputChange(key, e.target.value);
//                   logSelections();
//                 }}
//               />
//             )}
//           </div>
//         ))}
//       </div>

//       {/* Save and Reset Buttons */}
//       <div className="flex justify-end mt-6">
//         <button
//           className="bg-gray-200 text-gray-800 px-6 py-3 rounded-lg mr-3 font-medium hover:bg-gray-300 transition-colors flex items-center"
//           onClick={handleReset}
//         >
//           Reset
//         </button>
//         <button
//           className="text-white px-6 py-3 rounded-lg font-medium shadow-md hover:shadow-lg transition-all transform hover:-translate-y-1 flex items-center"
//           style={{
//             background: `linear-gradient(to right, ${primaryColor}, ${primaryDark})`,
//           }}
//           onClick={handleSaveChanges}
//         >
//           Save Changes
//           <ChevronRight size={18} className="ml-1" />
//         </button>
//       </div>
//     </div>
//   );
// };
