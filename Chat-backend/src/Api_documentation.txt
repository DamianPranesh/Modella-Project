Authentication Endpoints
File: auth.route.js

router.post("/signup", signup); // POST /api/auth/signup
router.post("/login", login); // POST /api/auth/login
router.post("/logout", logout); // POST /api/auth/logout
router.put("/update-profile", protectRoute, updateProfile); // PUT /api/auth/update-profile
router.get("/check", protectRoute, checkAuth); // GET /api/auth/check

Message Endpoints
File: message.route.js

router.get("/users", protectRoute, getUsersForSidebar); // GET /api/messages/users
router.get("/:id", protectRoute, getMessages); // GET /api/messages/:id
router.post("/send/:id", protectRoute, sendMessage); // POST /api/messages/send/:id


Authentication Endpoints
File: auth.route.js

POST /api/auth/signup

Description: Registers a new user.
Handler: signup
POST /api/auth/login

Description: Logs in an existing user.
Handler: login
POST /api/auth/logout

Description: Logs out the current user.
Handler: logout
PUT /api/auth/update-profile

Description: Updates the profile information of the logged-in user.
Handler: updateProfile
Middleware: protectRoute (ensures the user is authenticated)
GET /api/auth/check

Description: Checks if the user is authenticated.
Handler: checkAuth
Middleware: protectRoute (ensures the user is authenticated)
Message Endpoints
File: message.route.js

GET /api/messages/users

Description: Retrieves a list of users for the sidebar (likely for chat purposes).
Handler: getUsersForSidebar
Middleware: protectRoute (ensures the user is authenticated)
GET /api/messages/:id

Description: Retrieves messages for a specific conversation.
Handler: getMessages
Middleware: protectRoute (ensures the user is authenticated)
POST /api/messages/send/:id

Description: Sends a message to a specific conversation.
Handler: sendMessage
Middleware: protectRoute (ensures the user is authenticated)